/*
 * Copyright 2016 John Grosh (jagrosh).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.filters.ReplaceTokens

// gradlew build -> build jars

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

def versionObj = new Version(major: 1, minor: 3)
def jdaVersion = '3.1.1_219'

group = 'com.jagrosh'
archivesBaseName = project.name
version = versionObj.toString()

repositories {
    jcenter()
    maven { url 'https://mvnrepository.com/artifact/' }
}

dependencies {
    compileOnly "net.dv8tion:JDA:${jdaVersion}"
    compile 'com.mashape.unirest:unirest-java:1.3.1'
}

task sourcesForRelease(type: Copy) {
    from 'src/main/java'
    into 'build/filteredSrc'
    filter(ReplaceTokens, tokens: [
            versionMajor: versionObj.major.toString(),
            versionMinor: versionObj.minor.toString()
    ])
}

compileJava {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath
    options.encoding = 'UTF-8'

    dependsOn sourcesForRelease
}

jar {
    baseName = project.name
    manifest {
        attributes 'Implementation-Version': version
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from "${buildDir}/filteredSrc"
}

javadoc {
    failOnError = false
    options.encoding = 'UTF-8'
    options.author()
    options.memberLevel = JavadocMemberLevel.PROTECTED
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

shadowJar {
    classifier = 'withDependencies'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar
    dependsOn shadowJar

    jar.mustRunAfter clean
    sourcesJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
    shadowJar.mustRunAfter sourcesJar
}

class Version {
    String major, minor

    String toString() {
        "${major}.${minor}"
    }
}