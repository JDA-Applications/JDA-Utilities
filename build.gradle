/*
 * Copyright 2016 John Grosh (jagrosh).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.filters.ReplaceTokens

// to build everything:             "gradlew build"
// to build and upload everything:  "gradlew bintrayUpload"

plugins {
    id 'com.jfrog.bintray' version '1.7.3'
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

def versionObj = new Version(major: 1, minor: 8)
def jdaVersion = '3.3.1_284'

group = 'com.jagrosh'
archivesBaseName = project.name
version = versionObj.toString()

sourceSets {
    main.java.srcDirs += 'src/main/java'
    test {
        compileClasspath = main.compileClasspath
        runtimeClasspath = main.runtimeClasspath
    }
}

repositories {
    jcenter()
    maven { url 'https://mvnrepository.com/artifact/' }
}

dependencies {
    compileOnly "net.dv8tion:JDA:${jdaVersion}"

    testCompileOnly group: 'junit', name: 'junit', version: '4.12'
}

task sourcesForRelease(type: Copy) {
    from 'src/main/java'
    into 'build/filteredSrc'
    filter(ReplaceTokens, tokens: [
            versionMajor: versionObj.major.toString(),
            versionMinor: versionObj.minor.toString()
    ])
}

compileJava {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath
    options.encoding = 'UTF-8'

    dependsOn sourcesForRelease
}

jar {
    baseName = project.name
    manifest {
        attributes 'Implementation-Version': version
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from "${buildDir}/filteredSrc"
}

javadoc {
    failOnError = false
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author()
    options.encoding = 'UTF-8'

    // exclude internal classes
    exclude('com/jagrosh/jdautilities/commandclient/impl')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

shadowJar {
    classifier = 'withDependencies'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.1'
}

bintray {
    user = bintrayUsername
    key = bintrayApiKey
    publications = ["BintrayRelease"]
    publish = true
    pkg {
        repo = 'maven'
        name = 'JDA-Utilities'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/JDA-Applications/JDA-Utilities'
        version {
            name = project.version
            released = new Date()
        }
    }
}

publishing {
    publications {
        BintrayRelease(MavenPublication) {
            from components.java
            groupId group
            artifactId archivesBaseName
            version version
            artifact javadocJar
            artifact sourcesJar
        }
    }
}

String getProjectProperty(String propertyName)
{
    String property = ""
    if (hasProperty(propertyName))
    {
        property = this.properties[propertyName]
    }
    return property
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar
    dependsOn shadowJar

    jar.mustRunAfter clean
    javadocJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
    shadowJar.mustRunAfter sourcesJar
}

bintrayUpload {
    dependsOn build

    onlyIf { !getProjectProperty("bintrayUsername").empty }
    onlyIf { !getProjectProperty("bintrayApiKey").empty }
}

class Version {
    String major, minor

    String toString() {
        "${major}.${minor}"
    }
}
